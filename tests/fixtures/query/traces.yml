traces:
#test popping nested statements
  - cohort_on: query( product ) # groups on this expression and splits data from each group into seperate traces  
    filter: query( product in ('Premium Photo', 'White Paper') )
    model:
      sql: "SELECT * FROM jared_dev.salesmart.fact_transaction"  #Compiled version of base sql just to illistrate how to use. 
    order_by: query( date_trunc('quarter', created_at) )

    #rest of the keys are all standard plotly trace configurations
    name: trace_one # required and needs to be unique in the project. Will be converted to snakecase. 
    type: bar # first trace in chart
    x: query( date_trunc('quarter', created_at) ) # Multiple columns can be added in a list to the x or y columns but not both
    y: query( SUM(amount) ) # If an aggregation is used a group_by clause is required
  
  - cohort_on: query( product ) # groups on this expression and splits data from each group into seperate traces  
    filter: query( product in ('Premium Photo', 'White Paper') )
    model:
      sql: "SELECT * FROM jared_dev.salesmart.fact_transaction"  #Compiled version of base sql just to illistrate how to use. 
    order_by: query( date_trunc('quarter', created_at) )

    #rest of the keys are all standard plotly trace configurations
    name: second_trace # required needs to be unique in the project. Needs to be snake case or camel case
    type: bar # first trace in chart
    x: query( date_trunc('quarter', created_at) ) # Multiple columns can be added in a list to the x or y columns but not both
    y: query( SUM(amount) ) # If an aggregation is used a group_by clause is required
    marker:
      colorbar:
        tickprefix: 'pre_'
    error_y:
      array: query(SUM(amount) +  1)
